#!/bin/bash
#check Embold is disable
commit_msg=$(cat "${1:?Missing commit message file}")
commit_msg=$(echo "$commit_msg" | tr '[:upper:]' '[:lower:]')
if [[ $commit_msg == *"embold --skip"* ]]; then
	echo "Embold Gated commit disable"
	echo "[Embold Gated commit disabled]" >> $1
	exit 0
fi
#check CORONA_HOME is not empty
corona_home=$CORONA_HOME
if [[ -z "$corona_home" ]]
then
	echo "CORONA_HOME is not defined"
	exit 1
fi

#check CORONA_SCANNER_HOME is not empty
corona_scanner_home=$CORONA_SCANNER_HOME
if [[ -z "$corona_scanner_home" ]]
then
	echo "CORONA_SCANNER_HOME is not defined"
	exit 1
fi

#check if merge commit
hash=`git rev-parse -q --verify MERGE_HEAD`
if [[ ! -z "$hash" ]]
then
	exit 0
fi
random_str=`(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 10 ; echo '')`
temp_dir=$corona_home/temp/$random_str
mkdir -p $temp_dir
echo "Embold Analysis started, Please wait..."
current_dir=$(pwd)
pluginxml=$corona_home/coronacli/config/plugins_empty.xml
$corona_home/coronacli/bin/coronacli -b "$current_dir" -c "$current_dir" -d "$temp_dir" -r "git" -p $pluginxml -g > $corona_home/temp/gated_commit.log
quality_gate_output_file=$temp_dir/GatedCommit/quality_gate_output.txt
if [ ! -e $quality_gate_output_file ]
then
	echo "Embold Analysis Failed"
	exit 0
fi
var=`cat $quality_gate_output_file | grep Status`
status=`echo "$var" | cut -c 8-`
if [[ "$status" == "pass" ]]
then
	echo "[Embold Quality Gate:Passed]" >> $1
	rm -r $temp_dir
	exit 0
elif [ "$status" == "warning" ]
then
	echo "[Embold Quality Gate:Passed]" >> $1
	while read line; do
		echo $line
	done < $quality_gate_output_file
	rm -r $temp_dir
	exit 0
elif [ "$status" == "EmboldFailed" ]
then
	echo "[Embold Analysis failed]" >> $1
	while read line; do
		echo $line
	done < $quality_gate_output_file
	rm -r $temp_dir
	exit 0
else
	if [[ $commit_msg == *"embold --force-commit"* ]]; then
		echo "Embold Quality Gate:Failed"
		echo "[Embold Quality Gate:Failed]" >> $1
		status_flag=false
		while read line; do
			if [ "$status_flag" = true ] ; then
				echo $line >> $1
			fi
			if [ "$status_flag" = false ] ; then
				status_flag=true
			fi
		done < $quality_gate_output_file
		rm -r $temp_dir
		exit 0
	else
		echo "Embold Quality Gate:Failed"
		echo "Commit Status: Rejected"
		status_flag=false
		while read line; do
			if [ "$status_flag" = true ] ; then
				echo $line
			fi
			if [ "$status_flag" = false ] ; then
				status_flag=true
			fi
		done < $quality_gate_output_file
		rm -r $temp_dir
		exit 1
	fi
fi
